# Disable git shallow clone. We need full history for validating copyright year of each file.
git:
    depth: false

env:
    global:
        # Should be encrypted or set as private travis variables (in travis settings):
        # - AWS_S3_ACCESS_KEY_ID=''
        # - AWS_S3_SECRET_ACCESS_KEY=''
        # - GITHUB_RELEASE_TOKEN=''

        # AWS S3 bucket name, need to have access setup.
        # Can be overridden by travis private variable set in travis settings: AWS_BUCKET_OVERRIDE
        - AWS_BUCKET_DEFAULT=mender-buildsystem

        # AWS region.
        # Can be overridden by travis private variable set in travis settings: AWS_REGION_OVERRIDE
        - AWS_REGION_DEFAULT=eu-west-1

        # AWS S3 ACL for build artifacts.
        # Valid ACL values are: private, public_read, public_read_write, authenticated_read,
        # bucket_owner_read, bucket_owner_full_control.
        # Can be overridden by travis private variable set in travis settings: AWS_S3_ACL_OVERRIDE
        - AWS_S3_ACL_DEFAULT=private

        # Perform deployment steps if the build is performed for build: user/repo_name
        # $TRAVIS_REPO_SLUG could be used if want to perform deploy on any repo.
        # Currently perform deployment steps only of building main repository.
        # Can be overridden by travis private variable set in travis settings: DEPLOY_REPO_OVERRIDE
        - DEPLOY_REPO_DEFAULT=mendersoftware/mender-demo-artifact

        # Binary name to be uploaded to github release.
        - GITHUB_RELEASE_BINARY=mender-demo-artifact

        # Build artifacts list, fomat: "file1 file2 ./dir/file3"
        # Can be overridden by travis private variable set in travis settings: BUILD_ARTIFACTS_OVERRIDE
        - BUILD_ARTIFACTS_DEFAULT="mender-demo-artifact"

        # INTERNAL VARIABLES (for default/overrite management)
        - AWS_BUCKET=${AWS_BUCKET_OVERRIDE:-$AWS_BUCKET_DEFAULT}
        - AWS_REGION=${AWS_REGION_OVERRIDE:-$AWS_REGION_DEFAULT}
        - AWS_S3_ACL=${AWS_S3_ACL_OVERRIDE:-$AWS_S3_ACL_DEFAULT}
        - DEPLOY_REPO=${DEPLOY_REPO_OVERRIDE:-$DEPLOY_REPO_DEFAULT}
        - BUILD_ARTIFACTS=${BUILD_ARTIFACTS_OVERRIDE:-$BUILD_ARTIFACTS_DEFAULT}

        - MENDER_VERSION=2.0.0
        - MENDER_ARTIFACT_VERSION=3.0.0
        - ARTIFACT_NAME=mender-demo-artifact

before_install:
    - sudo apt update && sudo apt install -y python3-pip
    - sudo pip3 install --upgrade setuptools
    - sudo pip3 install --upgrade -r tests/requirements.txt

before_script:
    # Print build info that binary is compiled with.
    - echo $TRAVIS_COMMIT
    - echo $TRAVIS_TAG
    - echo $TRAVIS_BRANCH
    - echo $TRAVIS_BUILD_NUMBER
    - echo $TRAVIS_REPO_SLUG

    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin

jobs:
  include:
    - stage: Build and test
      script:
        # Check commit compliance.
        - git clone git://github.com/mendersoftware/mendertesting
        - mendertesting/check_commits.sh

        # Build
        - docker build -t mender-demo-artifact --build-arg MENDER_ARTIFACT_VERSION=$MENDER_ARTIFACT_VERSION --build-arg MENDER_VERSION=$MENDER_VERSION --build-arg ARTIFACT_NAME=$ARTIFACT_NAME .
        # Extract artifact
        - docker run --rm -v $PWD/output:/output mender-demo-artifact

        # Build test image
        - ( cd tests/mender_test_containers/docker/ && ./docker-build-raspbian )

        # Tests
        - ( cd tests && python3 -m pytest -v --mender-version $MENDER_VERSION )

after_success:
    # Make build directory and copy all artifacts to this directory.
    - mkdir build

deploy:
    # In case tag is set. Deploy build as github release.
    # List of files to be uploaded need to be specified in 'file' field
    -
        provider: releases
        api_key: $GITHUB_RELEASE_TOKEN
        file: $GITHUB_RELEASE_BINARY
        skip_cleanup: true
        on:
            repo: $DEPLOY_REPO
            tags: true
            all_branches: true

    # Deploy tag builds to S3 in structure /user/repo/release/tag
    -
        provider: s3
        access_key_id: $AWS_S3_ACCESS_KEY_ID
        secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $DEPLOY_REPO/release/$TRAVIS_TAG
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $DEPLOY_REPO
            tags: true
            all_branches: true

    # Deploy all development builds to S3 in structure /user/repo/dev/branch/build
    -
        provider: s3
        access_key_id: $AWS_S3_ACCESS_KEY_ID
        secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $DEPLOY_REPO/dev/$TRAVIS_BRANCH/$TRAVIS_BUILD_NUMBER
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $DEPLOY_REPO
            tags: false
            all_branches: true

    # Deploy all builds to S3 as latest folder /user/repo/latest/branch
    -
        provider: s3
        access_key_id: $AWS_S3_ACCESS_KEY_ID
        secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $DEPLOY_REPO/latest/$TRAVIS_BRANCH
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $DEPLOY_REPO
